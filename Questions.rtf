{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf100
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;\f1\fnil\fcharset0 Menlo-Bold;\f2\fnil\fcharset0 Menlo-Regular;
\f3\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red27\green31\blue34;\red255\green255\blue255;\red252\green95\blue163;
\red31\green31\blue36;\red255\green255\blue255;\red153\green232\blue213;\red145\green212\blue98;\red252\green106\blue93;
\red122\green200\blue182;}
{\*\expandedcolortbl;;\cssrgb\c14118\c16078\c18039;\cssrgb\c100000\c100000\c100000;\csgenericrgb\c98839\c37355\c63833;
\csgenericrgb\c12054\c12284\c14131;\csgenericrgb\c100000\c100000\c100000;\csgenericrgb\c59926\c90967\c83488;\csgenericrgb\c56799\c83212\c38450;\csgenericrgb\c98912\c41558\c36568;
\csgenericrgb\c47716\c78607\c71403;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid201\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid3}
{\list\listtemplateid4\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid301\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid4}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}{\listoverride\listid4\listoverridecount0\ls4}}
\margl1440\margr1440\vieww25520\viewh16880\viewkind0
\deftab720
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl0
\f0\fs32 \cf2 \cb3 \expnd0\expndtw0\kerning0
Q: What is a detail view controller?\
\pard\tx720\pardeftab720\partightenfactor0
\cf2 \cb1 A: When implementing a table view which displays multiple rows, a detail view and associated detail view controller allows a the content of a single row to be shown.\
\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls2\ilvl0\cf2 \cb3 Q: What does a segue do? How do you use it and where?\
A: A segue is the approach used to navigate from a table row to a detail view. It is implement by creating a special kind of connection using IB from the table cell to the detail view. \cb1 \
\pard\tx720\pardeftab720\partightenfactor0
\cf2 \cb3 \kerning1\expnd0\expndtw0 \
\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls3\ilvl0\cf2 \expnd0\expndtw0\kerning0
Q: What are other ways your detail view controller could get its information? Why use segues?\cb1 \
\pard\tx720\pardeftab720\partightenfactor0
\cf2 \cb3 \kerning1\expnd0\expndtw0 A: A detail view controller could have its own table view and cells and the associated outlets and actions, however this can become very complicated and confusing and could lead to errors in coding. Using a segue, we can define custom cells and associated view controller and simple pass that data along to a detail view controller for content display, The detail view controller may have some other function and need access to other view objects but need not have to duplicate those found in the table view controller.\
\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls4\ilvl0\cf2 \expnd0\expndtw0\kerning0
Q: Why must you conditionally cast custom cell types when using them with table views? How do you do this?\cb1 \
\pard\tx720\pardeftab720\partightenfactor0
\cf2 \cb3 \kerning1\expnd0\expndtw0 A: Since outlets from interface objects are usually made to the custom cell class and not in the Table View controller we cannot access any of the custom cell objects without first casting the cell in the cellforRow function as the custom cell type using a \'93as?\'94 In a guard let statement. This will then allow us to access the objects in the custom class for the content serving function of the table view,\
Example: \
\pard\tx543\pardeftab543\pardirnatural\partightenfactor0

\f1\b\fs22 \cf4 \cb5 guard
\f2\b0 \cf6  
\f1\b \cf4 let
\f2\b0 \cf6  cell = tableView.\cf7 dequeueReusableCell\cf6 (withIdentifier: \cf8 TableViewCell\cf6 .\cf8 reuseIdentifier\cf6 , for: indexPath) 
\f1\b \cf4 as
\f2\b0 \cf6 ? \cf8 TableViewCell\cf6  
\f1\b \cf4 else
\f2\b0 \cf6  \{
\f3\fs24 \cf0 \cb5 \

\f2\fs22 \cf6 \cb5             \cf7 fatalError\cf6 (\cf9 "Unable to dequeue cell"\cf6 )
\f3\fs24 \cf0 \cb5 \

\f2\fs22 \cf6 \cb5         \}
\f0\fs32 \cf2 \cb3 \
\pard\tx720\pardeftab720\partightenfactor0
\cf2 \expnd0\expndtw0\kerning0
\
Q: Why must you conditionally cast detail view controller types when using them with segues? How do you do this?\
A: A sequel is navigating from a source view to a destination view. In order for the segue, which defines its source as \'93self\'94 to operate, it must know which type is its destination. This needs to be conditionally cast as the detail view (or other view) type. Once done, the destination view has access to the data that the source view is providing. This data is usually cell content that the destination view needs to display per its controller instructions.\
Example:\
\pard\tx543\pardeftab543\pardirnatural\partightenfactor0

\f2\fs22 \cf6 \cb5 \kerning1\expnd0\expndtw0         
\f1\b \cf4 guard
\f2\b0 \cf6  
\f1\b \cf4 let
\f2\b0 \cf6  destinationVC = segue.\cf10 \cb5 destination\cf6 \cb5  
\f1\b \cf4 as
\f2\b0 \cf6 ? \cf8 DetailViewController}